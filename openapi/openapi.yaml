# Project:RAG_project_v0.5 Component:openapi Version:v0.7.0
openapi: 3.1.1
info:
  title: Confluence Evidence API
  version: "1.4.0-p2"
servers:
  - url: http://localhost:9000
  - url: http://localhost:8000
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PagedResponse:
      type: object
      properties:
        items:
          type: array
          items: {}
        next:
          type: integer
      additionalProperties: false
    HybridItem:
      type: object
      properties:
        id: { type: string }
        title: { type: string, nullable: true }
        space: { type: string, nullable: true }
        url: { type: string, nullable: true }
        lscore: { type: number, nullable: true }
        vscore: { type: number, nullable: true }
        score: { type: number }
      additionalProperties: false
    HybridResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/HybridItem" }
        took_ms: { type: integer }
      additionalProperties: false
    CodeSymbol:
      type: object
      properties:
        path: { type: string }
        lang: { type: string, nullable: true }
        symbol: { type: string }
        kind: { type: string, nullable: true }
        start_line: { type: integer, nullable: true }
        end_line: { type: integer, nullable: true }
        snippet: { type: string, nullable: true }
      additionalProperties: false
    CodeSymbolsResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/CodeSymbol" }
        took_ms: { type: integer }
      additionalProperties: false
    Neighbor:
      type: object
      properties:
        src: { type: string }
        dst: { type: string }
        kind: { type: string, nullable: true }
        weight: { type: number, nullable: true }
      additionalProperties: false
    GraphNeighborsResponse:
      type: object
      properties:
        id: { type: string }
        neighbors:
          type: array
          items: { $ref: "#/components/schemas/Neighbor" }
      additionalProperties: false
paths:
  /v1/search/hybrid:
    get:
      summary: Hybrid search using BM25/tsvector + pgvector ANN
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: k
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: Hybrid results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HybridResponse"
  /v1/code/symbols:
    get:
      summary: Search code symbol index (tsvector)
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: k
          schema: { type: integer, default: 20, minimum: 1, maximum: 200 }
      responses:
        '200':
          description: Symbol results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSymbolsResponse"
  /v1/code/grep:
    get:
      summary: Grep code windows by substring or regex
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: regex
          schema: { type: integer, default: 0 }
        - in: query
          name: k
          schema: { type: integer, default: 20, minimum: 1, maximum: 200 }
      responses:
        '200':
          description: Grep results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSymbolsResponse"
  /v1/graph/neighbors:
    get:
      summary: Graph neighbors from code/doc link graph
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20, minimum: 1, maximum: 200 }
      responses:
        '200':
          description: Neighbors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GraphNeighborsResponse"

